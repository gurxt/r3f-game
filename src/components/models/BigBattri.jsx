/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 .\public\BigBattri.glb 
*/

import React, { forwardRef, useContext, useEffect, useRef } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { CharacterContext } from '../hooks/useContext'

const Battri = forwardRef((props, ref) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/BigBattri-transformed.glb')
  const { actions } = useAnimations(animations, group)
  const { animation, previousAnimation } = useContext(CharacterContext)

  useEffect(() => {
    if (previousAnimation && actions[previousAnimation]) {
      console.log(previousAnimation, animation)
      // Crossfade from previous animation to current animation over 0.5 seconds
      actions[animation].reset().play();  // Reset and play current animation
      actions[previousAnimation].crossFadeTo(actions[animation], 0.5, false);  // Crossfade to new animation
    } else {
      // No previous animation, so just play the current one
      actions[animation].play();
    }
  }, [animation]);

  return (
    <group {...props} ref={ref} dispose={null}>
      <group ref={group} rotation={[0, Math.PI, 0]} name="Scene">
        <group name="armature" position={[0, -0.034, -0.011]} scale={0.848}>
          <primitive object={nodes.spine} />
          <primitive object={nodes.pole_targetl} />
          <primitive object={nodes.controllerl} />
          <primitive object={nodes.pole_targetr} />
          <primitive object={nodes.controllerr} />
        </group>
        <skinnedMesh name="Body" geometry={nodes.Body.geometry} material={materials.Material} skeleton={nodes.Body.skeleton} position={[0, -0.034, -0.011]} scale={0.848} />
      </group>
    </group>
  )
})

export default Battri

useGLTF.preload('/BigBattri-transformed.glb')

